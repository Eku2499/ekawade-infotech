*** Begin Patch
*** Add File: .dockerignore
+__pycache__/
+*.pyc
+*.pyo
+*.pyd
+.Python
+env/
+venv/
+.venv/
+build/
+dist/
+*.egg-info
+*.egg
+*.db
+booking.xlsx
+*.sqlite3
+*.log
+.idea/
+.vscode/
+.DS_Store
+.env
+.env.*
+node_modules/
+
*** End Patch
*** Begin Patch
*** Add File: Dockerfile
+# Use an official lightweight Python image
+FROM python:3.11-slim
+
+# Set environment variables
+ENV PYTHONDONTWRITEBYTECODE=1 \
+    PYTHONUNBUFFERED=1 \
+    PORT=8000
+
+WORKDIR /app
+
+# system deps
+RUN apt-get update && apt-get install -y --no-install-recommends \
+    build-essential \
+    && rm -rf /var/lib/apt/lists/*
+
+# copy requirements first for better caching
+COPY requirements.txt /app/
+RUN pip install --no-cache-dir -r requirements.txt
+
+# copy application
+COPY . /app
+
+# ensure writable dir for sqlite
+RUN mkdir -p /app/data && chown -R root:root /app/data
+
+EXPOSE ${PORT}
+
+# Use gunicorn to serve the app; wsgi.py exposes `application`
+CMD ["gunicorn", "--bind", "0.0.0.0:8000", "wsgi:application", "--workers", "2"]
+
*** End Patch
*** Begin Patch
*** Add File: .github/workflows/ci.yml
+name: CI
+
+on:
+  push:
+    branches: [ main, master ]
+  pull_request:
+    branches: [ main, master ]
+
+jobs:
+  tests-and-build:
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v4
+
+      - name: Set up Python
+        uses: actions/setup-python@v4
+        with:
+          python-version: '3.11'
+
+      - name: Install dependencies
+        run: |
+          python -m pip install --upgrade pip
+          pip install -r requirements.txt
+
+      - name: Run tests
+        run: |
+          python -m pytest -q
+
+      - name: Set up QEMU
+        uses: docker/setup-qemu-action@v2
+
+      - name: Set up Docker Buildx
+        uses: docker/setup-buildx-action@v2
+
+      - name: Log in to GitHub Container Registry
+        uses: docker/login-action@v2
+        with:
+          registry: docker.io
+          username: ${{ secrets.DOCKERHUB_USERNAME }}
+          password: ${{ secrets.DOCKERHUB_TOKEN }}
+
+      - name: Build and push image to Docker Hub
+        uses: docker/build-push-action@v4
+        with:
+          context: .
+          push: true
+          platforms: linux/amd64,linux/arm64
+          tags: |
+            ${{ secrets.DOCKERHUB_USERNAME }}/ekawade-infotech:latest
+            ${{ secrets.DOCKERHUB_USERNAME }}/ekawade-infotech:${{ github.sha }}
+
*** End Patch
*** Begin Patch
*** Add File: README_DOCKER_HUB_NOTES.txt
+This file contains quick notes about applying the patch and the GitHub Actions Docker Hub secrets.
+
+Add these repository secrets in GitHub (Settings -> Secrets -> Actions):
+- DOCKERHUB_USERNAME
+- DOCKERHUB_TOKEN
+
+To apply the patch file generated by the project maintainer, see instructions in the main README.
+
*** End Patch
*** Begin Patch
*** Update File: README.md
@@
 Domain setup
 - Point `www.ekawadeinfotech.in` A record to the server IP and configure TLS at the reverse proxy (nginx) or use the hosting provider's TLS feature.
 
 Docker
 -------
@@
 ```powershell
 docker run -p 8000:8000 -e ADMIN_AUTH=1 -e ADMIN_USER=admin -e ADMIN_PASS=s3cr3t -e SECRET_KEY='replace-with-secure' ekawade-infotech:latest
 ```
 
 CI/CD
 ------
@@
 - `DOCKERHUB_TOKEN` â€” Docker Hub access token or password (recommended: use an access token)
 
 The CI workflow will tag the image as `<DOCKERHUB_USERNAME>/ekawade-infotech:latest` and also with the commit SHA.
+
+Applying the provided patch file
+--------------------------------
+
+I added a `ci-dockerhub.patch` file (in this repo root) that contains the new files and README updates. To apply it locally:
+
+```powershell
+# Save the patch (if you received it via transfer), then in your repo root:
# If your repo is already a git repo and you want to apply the changes:
git apply ci-dockerhub.patch
# Then stage and commit
git add .
git commit -m "chore(ci): add Docker Hub workflow, Dockerfile and docs"
+
# If your repo is not yet a git repo, initialize and then apply:
git init
git apply ci-dockerhub.patch
git add .
git commit -m "chore(ci): add Docker Hub workflow, Dockerfile and docs"
+```
+
+If `git apply` refuses because files already exist or hunks don't match, you can manually copy the new files listed in the patch into your project root.
+
*** End Patch
*** Begin Patch
*** Update File: d:\Ekawade Infotech\booking_api.py
@@
-try:
-    import openpyxl
-except Exception:
-    openpyxl = None
+try:
+    import openpyxl
+except Exception:
+    openpyxl = None
*** End Patch
